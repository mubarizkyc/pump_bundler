import { PublicKey, PublicKeyInitData } from "@solana/web3.js";
import { NATIVE_MINT } from "@solana/spl-token";
import { poolPda } from "@pump-fun/pump-swap-sdk";
import {
  PUMP_AMM_PROGRAM_ID,
  PUMP_FEE_PROGRAM_ID,
  PUMP_PROGRAM_ID,
} from "./sdk";

export function globalPda(): PublicKey {
  const [globalPda] = PublicKey.findProgramAddressSync(
    [Buffer.from("global")],
    PUMP_PROGRAM_ID,
  );
  return globalPda;
}

export function pumpFeeConfigPda(): PublicKey {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("fee_config"), PUMP_PROGRAM_ID.toBuffer()],
    PUMP_FEE_PROGRAM_ID,
  )[0];
}

export function bondingCurvePda(mint: PublicKeyInitData): PublicKey {
  const [bondingCurvePda] = PublicKey.findProgramAddressSync(
    [Buffer.from("bonding-curve"), new PublicKey(mint).toBuffer()],
    PUMP_PROGRAM_ID,
  );
  return bondingCurvePda;
}

export function creatorVaultPda(creator: PublicKey) {
  const [creatorVault] = PublicKey.findProgramAddressSync(
    [Buffer.from("creator-vault"), creator.toBuffer()],
    PUMP_PROGRAM_ID,
  );
  return creatorVault;
}

export function pumpPoolAuthorityPda(mint: PublicKey): [PublicKey, number] {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("pool-authority"), mint.toBuffer()],
    PUMP_PROGRAM_ID,
  );
}

export const CANONICAL_POOL_INDEX = 0;

export function canonicalPumpPoolPda(mint: PublicKey): [PublicKey, number] {
  const [pumpPoolAuthority] = pumpPoolAuthorityPda(mint);

  return poolPda(
    CANONICAL_POOL_INDEX,
    pumpPoolAuthority,
    mint,
    NATIVE_MINT,
    PUMP_AMM_PROGRAM_ID,
  );
}

export function globalVolumeAccumulatorPda(): [PublicKey, number] {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("global_volume_accumulator")],
    PUMP_PROGRAM_ID,
  );
}

export function userVolumeAccumulatorPda(user: PublicKey): [PublicKey, number] {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("user_volume_accumulator"), user.toBuffer()],
    PUMP_PROGRAM_ID,
  );
}
