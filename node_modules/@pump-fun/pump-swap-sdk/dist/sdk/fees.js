"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/sdk/fees.ts
var fees_exports = {};
__export(fees_exports, {
  calculateFeeTier: () => calculateFeeTier,
  computeFeesBps: () => computeFeesBps
});
module.exports = __toCommonJS(fees_exports);

// src/sdk/util.ts
var import_bn2 = __toESM(require("bn.js"));
var import_anchor = require("@coral-xyz/anchor");

// src/sdk/pda.ts
var import_web3 = require("@solana/web3.js");
var import_bn = __toESM(require("bn.js"));
var import_spl_token = require("@solana/spl-token");
var PUMP_AMM_PROGRAM_ID = "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA";
var PUMP_AMM_PROGRAM_ID_PUBKEY = new import_web3.PublicKey(PUMP_AMM_PROGRAM_ID);
var PUMP_PROGRAM_ID = "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P";
var PUMP_PROGRAM_ID_PUBKEY = new import_web3.PublicKey(PUMP_PROGRAM_ID);
var PUMP_FEE_PROGRAM_ID = "pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ";
var PUMP_FEE_PROGRAM_ID_PUBKEY = new import_web3.PublicKey(PUMP_FEE_PROGRAM_ID);
var PUMP_MINT = new import_web3.PublicKey(
  "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
);
function pumpPoolAuthorityPda(mint, pumpProgramId = PUMP_PROGRAM_ID_PUBKEY) {
  return import_web3.PublicKey.findProgramAddressSync(
    [Buffer.from("pool-authority"), mint.toBuffer()],
    pumpProgramId
  );
}

// src/sdk/util.ts
function isPumpPool(baseMint, poolCreator) {
  return pumpPoolAuthorityPda(baseMint)[0].equals(poolCreator);
}
function poolMarketCap({
  baseMintSupply,
  baseReserve,
  quoteReserve
}) {
  if (baseReserve.isZero()) {
    throw new Error(
      "Division by zero: pool base token reserves cannot be zero"
    );
  }
  return quoteReserve.mul(baseMintSupply).div(baseReserve);
}

// src/sdk/fees.ts
function computeFeesBps({
  globalConfig,
  feeConfig,
  creator,
  baseMintSupply,
  baseMint,
  baseReserve,
  quoteReserve,
  tradeSize
}) {
  if (feeConfig != null) {
    const marketCap = poolMarketCap({
      baseMintSupply,
      baseReserve,
      quoteReserve
    });
    return getFees({
      feeConfig,
      isPumpPool: isPumpPool(baseMint, creator),
      marketCap,
      tradeSize
    });
  }
  return {
    lpFeeBps: globalConfig.lpFeeBasisPoints,
    protocolFeeBps: globalConfig.protocolFeeBasisPoints,
    creatorFeeBps: globalConfig.coinCreatorFeeBasisPoints
  };
}
function getFees({
  feeConfig,
  isPumpPool: isPumpPool2,
  marketCap
}) {
  if (isPumpPool2) {
    return calculateFeeTier({
      feeTiers: feeConfig.feeTiers,
      marketCap
    });
  } else {
    return feeConfig.flatFees;
  }
}
function calculateFeeTier({
  feeTiers,
  marketCap
}) {
  const firstTier = feeTiers[0];
  if (marketCap.lt(firstTier.marketCapLamportsThreshold)) {
    return firstTier.fees;
  }
  for (const tier of feeTiers.slice().reverse()) {
    if (marketCap.gte(tier.marketCapLamportsThreshold)) {
      return tier.fees;
    }
  }
  return firstTier.fees;
}
