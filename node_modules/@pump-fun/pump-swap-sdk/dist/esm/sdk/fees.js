// src/sdk/util.ts
import BN2 from "bn.js";
import { AnchorProvider, Program } from "@coral-xyz/anchor";

// src/sdk/pda.ts
import { PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import {
  getAssociatedTokenAddressSync,
  NATIVE_MINT,
  TOKEN_2022_PROGRAM_ID
} from "@solana/spl-token";
var PUMP_AMM_PROGRAM_ID = "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA";
var PUMP_AMM_PROGRAM_ID_PUBKEY = new PublicKey(PUMP_AMM_PROGRAM_ID);
var PUMP_PROGRAM_ID = "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P";
var PUMP_PROGRAM_ID_PUBKEY = new PublicKey(PUMP_PROGRAM_ID);
var PUMP_FEE_PROGRAM_ID = "pfeeUxB6jkeY1Hxd7CsFCAjcbHA9rWtchMGdZ6VojVZ";
var PUMP_FEE_PROGRAM_ID_PUBKEY = new PublicKey(PUMP_FEE_PROGRAM_ID);
var PUMP_MINT = new PublicKey(
  "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
);
function pumpPoolAuthorityPda(mint, pumpProgramId = PUMP_PROGRAM_ID_PUBKEY) {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("pool-authority"), mint.toBuffer()],
    pumpProgramId
  );
}

// src/sdk/util.ts
function isPumpPool(baseMint, poolCreator) {
  return pumpPoolAuthorityPda(baseMint)[0].equals(poolCreator);
}
function poolMarketCap({
  baseMintSupply,
  baseReserve,
  quoteReserve
}) {
  if (baseReserve.isZero()) {
    throw new Error(
      "Division by zero: pool base token reserves cannot be zero"
    );
  }
  return quoteReserve.mul(baseMintSupply).div(baseReserve);
}

// src/sdk/fees.ts
function computeFeesBps({
  globalConfig,
  feeConfig,
  creator,
  baseMintSupply,
  baseMint,
  baseReserve,
  quoteReserve,
  tradeSize
}) {
  if (feeConfig != null) {
    const marketCap = poolMarketCap({
      baseMintSupply,
      baseReserve,
      quoteReserve
    });
    return getFees({
      feeConfig,
      isPumpPool: isPumpPool(baseMint, creator),
      marketCap,
      tradeSize
    });
  }
  return {
    lpFeeBps: globalConfig.lpFeeBasisPoints,
    protocolFeeBps: globalConfig.protocolFeeBasisPoints,
    creatorFeeBps: globalConfig.coinCreatorFeeBasisPoints
  };
}
function getFees({
  feeConfig,
  isPumpPool: isPumpPool2,
  marketCap
}) {
  if (isPumpPool2) {
    return calculateFeeTier({
      feeTiers: feeConfig.feeTiers,
      marketCap
    });
  } else {
    return feeConfig.flatFees;
  }
}
function calculateFeeTier({
  feeTiers,
  marketCap
}) {
  const firstTier = feeTiers[0];
  if (marketCap.lt(firstTier.marketCapLamportsThreshold)) {
    return firstTier.fees;
  }
  for (const tier of feeTiers.slice().reverse()) {
    if (marketCap.gte(tier.marketCapLamportsThreshold)) {
      return tier.fees;
    }
  }
  return firstTier.fees;
}
export {
  calculateFeeTier,
  computeFeesBps
};
